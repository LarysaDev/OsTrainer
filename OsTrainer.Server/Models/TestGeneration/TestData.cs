namespace OsTrainer.Server.Models.TestGeneration
{
    public class TestData
    {
        public List<TestQuestion> Questions { get; set; }

        public TestData()
        {
            Questions = new List<TestQuestion>()
            {
                //FCFS
                new TestQuestion { Id = 1, AlgorithmId = 1, QuestionText = "Яка основна характеристика алгоритму FCFS?", Options = new List<string> { "Непереривний", "Преривний", "Циклічний", "На основі пріоритету" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 2, AlgorithmId = 1, QuestionText = "Алгоритм FCFS найкраще підходить для:", Options = new List<string> { "Задач з високим пріоритетом", "Задач з низьким пріоритетом", "Послідовних задач", "Одноразових задач" }, CorrectOptionIndex = 2 },
                new TestQuestion { Id = 3, AlgorithmId = 1, QuestionText = "Який процес обробляється першим у FCFS?", Options = new List<string> { "Процес з найменшим часом виконання", "Процес, що надійшов першим", "Процес з найвищим пріоритетом", "Процес з мінімальним часом очікування" }, CorrectOptionIndex = 1 },
                new TestQuestion { Id = 4, AlgorithmId = 1, QuestionText = "Яка проблема часто виникає з FCFS?", Options = new List<string> { "Затримка (Starvation)", "Голодання", "Справедливий розподіл", "Конкуренція ресурсів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 5, AlgorithmId = 1, QuestionText = "FCFS означає:", Options = new List<string> { "First-Come, First-Served", "Fast-Computing, Fair-Serving", "Fixed-Cost, Free-Solution", "First-Come, Fair-Service" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 6, AlgorithmId = 1, QuestionText = "Як обробляються процеси у FCFS?", Options = new List<string> { "На основі пріоритету", "В порядку надходження", "По черзі", "На основі часу виконання" }, CorrectOptionIndex = 1 },
                new TestQuestion { Id = 7, AlgorithmId = 1, QuestionText = "Основна перевага FCFS?", Options = new List<string> { "Простота", "Продуктивність", "Справедливість", "Мінімальні затримки" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 8, AlgorithmId = 1, QuestionText = "У якому випадку FCFS працює ефективно?", Options = new List<string> { "Для великих задач", "Для коротких задач", "Для одночасних процесів", "Для послідовних задач" }, CorrectOptionIndex = 3 },
                new TestQuestion { Id = 9, AlgorithmId = 1, QuestionText = "Який недолік має FCFS?", Options = new List<string> { "Голодання", "Повільне виконання", "Довгий час очікування", "Високі ресурси" }, CorrectOptionIndex = 2 },
                new TestQuestion { Id = 10, AlgorithmId = 1, QuestionText = "Алгоритм FCFS вимагає:", Options = new List<string> { "Високий пріоритет", "Простий планувальник", "Комплексний планувальник", "Динамічний розподіл часу" }, CorrectOptionIndex = 1 },
                new TestQuestion { Id = 11, AlgorithmId = 1, QuestionText = "Чи дозволяє FCFS переривання процесів?", Options = new List<string> { "Так", "Ні", "Залежить від задачі", "Лише для коротких задач" }, CorrectOptionIndex = 1 },
                new TestQuestion { Id = 12, AlgorithmId = 1, QuestionText = "FCFS найкраще підходить для задач:", Options = new List<string> { "З високим пріоритетом", "Послідовних", "Непереривних", "Коротких" }, CorrectOptionIndex = 1 },
                new TestQuestion { Id = 13, AlgorithmId = 1, QuestionText = "Слабкість FCFS в:", Options = new List<string> { "Час очікування", "Простота", "Продуктивність", "Використання ресурсів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 14, AlgorithmId = 1, QuestionText = "FCFS призводить до:", Options = new List<string> { "Простого розподілу ресурсів", "Справедливості", "Голодання", "Непереривного часу" }, CorrectOptionIndex = 2 },
                new TestQuestion { Id = 15, AlgorithmId = 1, QuestionText = "Які задачі отримують перевагу у FCFS?", Options = new List<string> { "Задачі з коротким часом", "Пріоритетні задачі", "Задачі, що надійшли першими", "Задачі з великим часом" }, CorrectOptionIndex = 2 },

                //Round Robin
                new TestQuestion { Id = 16, AlgorithmId = 2, QuestionText = "Що таке часове квантування у Round Robin?", Options = new List<string> { "Обмеження часу для кожного процесу", "Час початку процесу", "Час завершення процесу", "Час між запусками процесів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 17, AlgorithmId = 2, QuestionText = "Як розподіляються процеси в Round Robin?", Options = new List<string> { "За пріоритетом", "Циклічно по черзі", "Залежно від часу виконання", "Випадковим чином" }, CorrectOptionIndex = 1 },
                new TestQuestion { Id = 18, AlgorithmId = 2, QuestionText = "Round Robin найкраще підходить для:", Options = new List<string> { "Систем з високим пріоритетом", "Систем реального часу", "Багатокористувацьких середовищ", "Процесів з великим часом виконання" }, CorrectOptionIndex = 2 },
                new TestQuestion { Id = 19, AlgorithmId = 2, QuestionText = "Якщо процес не завершено протягом кванта часу в Round Robin, то:", Options = new List<string> { "Його переривають і поміщають в кінець черги", "Він продовжує виконання", "Його видаляють з черги", "Його час збільшується" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 20, AlgorithmId = 2, QuestionText = "Який основний недолік Round Robin?", Options = new List<string> { "Затримка процесів з високим пріоритетом", "Погане використання ресурсів", "Справедливий розподіл часу", "Зниження продуктивності" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 21, AlgorithmId = 2, QuestionText = "Round Robin забезпечує:", Options = new List<string> { "Пріоритетний доступ", "Циклічний доступ", "Доступ на основі часу очікування", "Випадковий доступ" }, CorrectOptionIndex = 1 },
                new TestQuestion { Id = 22, AlgorithmId = 2, QuestionText = "Яке значення має квантування часу у Round Robin?", Options = new List<string> { "Чим менше, тим кращий розподіл", "Чим більше, тим вища продуктивність", "Не має значення", "Залежить від часу виконання процесів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 23, AlgorithmId = 2, QuestionText = "Round Robin є прикладом:", Options = new List<string> { "Преривного планування", "Непереривного планування", "Пріоритетного планування", "Випадкового планування" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 24, AlgorithmId = 2, QuestionText = "Яка основна перевага Round Robin?", Options = new List<string> { "Справедливий розподіл часу", "Швидке виконання процесів", "Зниження затримок", "Пріоритетний доступ до ресурсів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 25, AlgorithmId = 2, QuestionText = "Як квантування часу впливає на продуктивність Round Robin?", Options = new List<string> { "Збільшує затримки", "Підвищує продуктивність", "Не впливає", "Забезпечує справедливий розподіл" }, CorrectOptionIndex = 3 },
                new TestQuestion { Id = 26, AlgorithmId = 2, QuestionText = "Що відбувається після завершення кванта часу в Round Robin?", Options = new List<string> { "Процес завершується", "Процес відправляється в кінець черги", "Процес отримує додатковий час", "Процес видаляється з черги" }, CorrectOptionIndex = 1 },
                new TestQuestion { Id = 27, AlgorithmId = 2, QuestionText = "Round Robin використовує квантування часу для:", Options = new List<string> { "Розподілу ресурсів", "Визначення пріоритету", "Забезпечення циклічного доступу", "Обмеження часу виконання" }, CorrectOptionIndex = 3 },
                new TestQuestion { Id = 28, AlgorithmId = 2, QuestionText = "Основна мета Round Robin:", Options = new List<string> { "Максимізація пріоритету", "Справедливий доступ до процесора", "Зменшення затримок", "Підвищення продуктивності" }, CorrectOptionIndex = 1 },
                new TestQuestion { Id = 29, AlgorithmId = 2, QuestionText = "Round Robin забезпечує процеси:", Options = new List<string> { "З рівним доступом до ресурсів", "З максимальним часом виконання", "З доступом на основі пріоритету", "З доступом на основі часу виконання" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 30, AlgorithmId = 2, QuestionText = "Яке середовище ідеально підходить для Round Robin?", Options = new List<string> { "Системи реального часу", "Мультизадачні системи", "Однозадачні системи", "Системи з високим пріоритетом" }, CorrectOptionIndex = 1 },

                //SJF (Non-preemptive)
                new TestQuestion { Id = 31, AlgorithmId = 3, QuestionText = "Що означає SJF у плануванні процесів?", Options = new List<string> { "Shortest Job First", "Shortest Job Forever", "Shortest Job Flow", "Shortest Jump First" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 32, AlgorithmId = 3, QuestionText = "Як процес обирається у SJF (Non-preemptive)?", Options = new List<string> { "З найкоротшим часом виконання", "З найвищим пріоритетом", "З найбільшим часом очікування", "У випадковому порядку" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 33, AlgorithmId = 3, QuestionText = "Який тип процесів виконується першим у SJF (Non-preemptive)?", Options = new List<string> { "Той, що має найкоротший час виконання", "Той, що має найвищий пріоритет", "Той, що має найстаріший час надходження", "Той, що має найменшу затримку" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 34, AlgorithmId = 3, QuestionText = "Основна перевага алгоритму SJF (Non-preemptive):", Options = new List<string> { "Зменшує загальний час виконання", "Збільшує пріоритет процесів", "Зменшує затримки для великих процесів", "Забезпечує циклічний доступ" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 35, AlgorithmId = 3, QuestionText = "Який основний недолік SJF (Non-preemptive)?", Options = new List<string> { "Схильний до ефекту затримки довгих процесів", "Не враховує час очікування", "Вимагає високих ресурсів", "Призводить до перевантаження" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 36, AlgorithmId = 3, QuestionText = "SJF (Non-preemptive) ідеально підходить для:", Options = new List<string> { "Коротких процесів з передбачуваним часом", "Процесів реального часу", "Випадкових процесів", "Високопріоритетних процесів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 37, AlgorithmId = 3, QuestionText = "Що станеться, якщо всі процеси мають однаковий час виконання у SJF?", Options = new List<string> { "Виконуються у порядку надходження", "Виконуються у випадковому порядку", "Виконуються на основі пріоритету", "Час очікування збільшується" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 38, AlgorithmId = 3, QuestionText = "SJF (Non-preemptive) базується на:", Options = new List<string> { "Часі виконання процесу", "Пріоритеті процесу", "Часі надходження процесу", "Системних налаштуваннях" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 39, AlgorithmId = 3, QuestionText = "Що відбувається з процесами з великим часом у SJF (Non-preemptive)?", Options = new List<string> { "Вони можуть чекати довше", "Вони мають вищий пріоритет", "Вони завжди виконуються першими", "Вони не виконуються" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 40, AlgorithmId = 3, QuestionText = "Чому SJF (Non-preemptive) не підходить для процесів реального часу?", Options = new List<string> { "Через затримку для довгих процесів", "Через необхідність високих ресурсів", "Через випадковий вибір процесів", "Через фіксовану чергу" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 41, AlgorithmId = 3, QuestionText = "Як алгоритм SJF (Non-preemptive) вирішує конфлікти між процесами з однаковим часом виконання?", Options = new List<string> { "Виконує у порядку надходження", "Виконує у випадковому порядку", "Виконує за пріоритетом", "Виконує на основі системного вибору" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 42, AlgorithmId = 3, QuestionText = "Що є основним фактором вибору процесу у SJF (Non-preemptive)?", Options = new List<string> { "Час виконання", "Час очікування", "Пріоритет", "Ресурси" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 43, AlgorithmId = 3, QuestionText = "SJF (Non-preemptive) забезпечує:", Options = new List<string> { "Мінімізацію часу виконання", "Максимальний пріоритет процесу", "Випадковий доступ до процесів", "Підвищення продуктивності для довгих процесів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 44, AlgorithmId = 3, QuestionText = "SJF (Non-preemptive) не дозволяє:", Options = new List<string> { "Переривання процесів", "Циклічний доступ до ресурсів", "Зменшення часу очікування", "Справедливий розподіл часу" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 45, AlgorithmId = 3, QuestionText = "Як SJF (Non-preemptive) впливає на час очікування коротких процесів?", Options = new List<string> { "Зменшує його", "Збільшує його", "Не впливає", "Рівномірно розподіляє його" }, CorrectOptionIndex = 0 },

                //SJF (Preemptive)
                new TestQuestion { Id = 46, AlgorithmId = 4, QuestionText = "Що означає 'Preemptive' у SJF (Preemptive)?", Options = new List<string> { "Можливість переривання процесу", "Виконання процесу до завершення", "Циклічне виконання процесів", "Пріоритет на основі очікування" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 47, AlgorithmId = 4, QuestionText = "Коли процес може бути перерваний у SJF (Preemptive)?", Options = new List<string> { "Коли з'являється процес з коротшим часом виконання", "Коли досягається часове обмеження", "Коли завершується цикл", "Коли немає інших процесів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 48, AlgorithmId = 4, QuestionText = "Який алгоритм також називається 'Shortest Remaining Time First'?", Options = new List<string> { "SJF (Preemptive)", "FCFS", "Round Robin", "Priority Scheduling" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 49, AlgorithmId = 4, QuestionText = "Основна перевага SJF (Preemptive):", Options = new List<string> { "Мінімізує середній час очікування", "Зменшує пріоритет низьких процесів", "Циклічно виконує всі процеси", "Збільшує час виконання" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 50, AlgorithmId = 4, QuestionText = "Який недолік має SJF (Preemptive)?", Options = new List<string> { "Відкладання процесів з великим часом", "Високе споживання ресурсів", "Нерівномірний розподіл часу", "Неможливість переривання" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 51, AlgorithmId = 4, QuestionText = "SJF (Preemptive) краще підходить для:", Options = new List<string> { "Короткочасних процесів з високим пріоритетом", "Процесів реального часу", "Довготривалих процесів", "Випадкових процесів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 52, AlgorithmId = 4, QuestionText = "Чим відрізняється SJF (Preemptive) від Non-preemptive?", Options = new List<string> { "Можливістю переривання процесу", "Підтримкою довгих процесів", "Циклічним виконанням", "Пріоритетом на основі надходження" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 53, AlgorithmId = 4, QuestionText = "У SJF (Preemptive), що станеться, якщо з'являється процес із коротшим часом?", Options = new List<string> { "Існуючий процес переривається", "Нічого не відбувається", "Процес продовжує виконуватися", "Процес завершується достроково" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 54, AlgorithmId = 4, QuestionText = "Як SJF (Preemptive) впливає на короткі процеси?", Options = new List<string> { "Зменшує час очікування для них", "Збільшує пріоритет", "Збільшує час виконання", "Рівномірно розподіляє ресурси" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 55, AlgorithmId = 4, QuestionText = "SJF (Preemptive) корисний, коли процеси:", Options = new List<string> { "Мають варіабельний час виконання", "Мають однаковий час", "Мають високий пріоритет", "Можуть перериватися лише вручну" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 56, AlgorithmId = 4, QuestionText = "Чому SJF (Preemptive) може спричинити затримки для довгих процесів?", Options = new List<string> { "Через часті переривання коротшими процесами", "Через нерівномірний розподіл пріоритетів", "Через нестачу ресурсів", "Через фіксований цикл виконання" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 57, AlgorithmId = 4, QuestionText = "Що є головним критерієм вибору процесу у SJF (Preemptive)?", Options = new List<string> { "Час, що залишився для виконання", "Пріоритет процесу", "Час надходження", "Кількість ресурсів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 58, AlgorithmId = 4, QuestionText = "Як SJF (Preemptive) обробляє нові процеси з коротким часом?", Options = new List<string> { "Перериває поточний процес", "Чекає завершення поточного процесу", "Додає їх у кінець черги", "Пропускає їх" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 59, AlgorithmId = 4, QuestionText = "Основна мета SJF (Preemptive):", Options = new List<string> { "Зменшити середній час очікування", "Збільшити час очікування для коротких процесів", "Забезпечити справедливий розподіл", "Оптимізувати використання ресурсів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 60, AlgorithmId = 4, QuestionText = "Який результат SJF (Preemptive) на продуктивність системи?", Options = new List<string> { "Покращення продуктивності для коротких процесів", "Збільшення часу виконання", "Зменшення пріоритету", "Нерівномірний розподіл" }, CorrectOptionIndex = 0 },

                //Priority(Non - preemptive)
                new TestQuestion { Id = 61, AlgorithmId = 5, QuestionText = "Що означає 'Non-preemptive' у алгоритмі пріоритету?", Options = new List<string> { "Процес не може бути перерваний", "Процес може бути перерваний", "Процеси виконуються в порядку надходження", "Всі процеси мають однаковий пріоритет" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 62, AlgorithmId = 5, QuestionText = "Який основний принцип алгоритму Priority (Non-preemptive)?", Options = new List<string> { "Виконання процесів за їх пріоритетом", "Виконання процесів у порядку надходження", "Виконання коротших процесів спочатку", "Виконання процесів із найменшою пам'яттю" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 63, AlgorithmId = 5, QuestionText = "Яка головна перевага алгоритму Priority (Non-preemptive)?", Options = new List<string> { "Гнучкість в обробці різних пріоритетів", "Простота реалізації", "Висока продуктивність", "Низьке споживання ресурсів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 64, AlgorithmId = 5, QuestionText = "Який недолік має алгоритм Priority (Non-preemptive)?", Options = new List<string> { "Можливість голодування низькоприорітетних процесів", "Складність реалізації", "Високе споживання ресурсів", "Невідомість часу виконання" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 65, AlgorithmId = 5, QuestionText = "При якій умові процес може отримати виконання в Priority (Non-preemptive)?", Options = new List<string> { "Коли всі процеси з вищим пріоритетом завершилися", "Коли система вільна", "Коли з'являється новий процес", "Коли процес запитує ресурси" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 66, AlgorithmId = 5, QuestionText = "У Priority (Non-preemptive) важливим є:", Options = new List<string> { "Визначення пріоритету для кожного процесу", "Тривалість виконання процесів", "Час надходження процесів", "Кількість запитів на ресурси" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 67, AlgorithmId = 5, QuestionText = "Яким чином обчислюється пріоритет процесів у Priority (Non-preemptive)?", Options = new List<string> { "На основі важливості або терміновості", "На основі часу виконання", "На основі кількості ресурсів", "На основі часу надходження" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 68, AlgorithmId = 5, QuestionText = "Які фактори можуть вплинути на визначення пріоритету в Priority (Non-preemptive)?", Options = new List<string> { "Важливість, терміновість, ресурси", "Тривалість, час надходження", "Кількість процесів", "Об'єм пам'яті" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 69, AlgorithmId = 5, QuestionText = "Що станеться з процесом низького пріоритету в системі з високими пріоритетами?", Options = new List<string> { "Може стати голодним", "Завжди виконується першим", "Переривається", "Отримує додаткові ресурси" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 70, AlgorithmId = 5, QuestionText = "У якій ситуації алгоритм Priority (Non-preemptive) може бути найбільш ефективним?", Options = new List<string> { "Коли процеси мають чітко визначені пріоритети", "Коли всі процеси мають однаковий час виконання", "Коли системі потрібно швидко обробити всі процеси", "Коли процеси виконуються в циклі" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 71, AlgorithmId = 5, QuestionText = "Чи може алгоритм Priority (Non-preemptive) викликати проблеми з затримками?", Options = new List<string> { "Так, через голодування", "Ні, оскільки всі процеси виконуються", "Ні, всі пріоритети однакові", "Так, через нерівномірний розподіл" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 72, AlgorithmId = 5, QuestionText = "Яка стратегія управління може допомогти уникнути голодування в Priority (Non-preemptive)?", Options = new List<string> { "Введення часового обмеження для виконання", "Збільшення пріоритету низькоприорітетних процесів", "Зменшення пріоритету високоприорітетних", "Виконання всіх процесів в порядку надходження" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 73, AlgorithmId = 5, QuestionText = "Яка мета використання пріоритетів у алгоритмі Priority (Non-preemptive)?", Options = new List<string> { "Оптимізація ресурсо-витрат", "Зменшення часу очікування", "Забезпечення справедливості", "Підвищення продуктивності" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 74, AlgorithmId = 5, QuestionText = "Чим алгоритм Priority (Non-preemptive) відрізняється від SJF?", Options = new List<string> { "Своєю основною метою - пріоритетами", "Своїм підходом до переривання", "Своєю складністю реалізації", "Своїм використанням пам'яті" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 75, AlgorithmId = 5, QuestionText = "У Priority (Non-preemptive) час виконання процесу залежить від:", Options = new List<string> { "Пріоритету процесу", "Тривалості процесу", "Часу надходження", "Кількості ресурсів" }, CorrectOptionIndex = 0 },

                //Priority(Preemptive)
                new TestQuestion { Id = 76, AlgorithmId = 6, QuestionText = "Що означає 'Preemptive' у алгоритмі пріоритету?", Options = new List<string> { "Процес може бути перерваний", "Процес не може бути перерваний", "Процеси виконуються в порядку надходження", "Всі процеси мають однаковий пріоритет" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 77, AlgorithmId = 6, QuestionText = "Яка основна перевага алгоритму Priority (Preemptive)?", Options = new List<string> { "Швидке реагування на високоприоритетні процеси", "Низьке споживання ресурсів", "Спростити управління пам'яттю", "Гнучкість в обробці процесів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 78, AlgorithmId = 6, QuestionText = "Який недолік має алгоритм Priority (Preemptive)?", Options = new List<string> { "Можливість збільшення часу виконання низькоприорітетних процесів", "Складність реалізації", "Невідомість часу виконання", "Високе споживання ресурсів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 79, AlgorithmId = 6, QuestionText = "Що відбувається з процесом, коли з'являється новий процес з вищим пріоритетом у Priority (Preemptive)?", Options = new List<string> { "Поточний процес переривається", "Нічого не відбувається", "Процес завершує виконання", "Процес ставиться в кінець черги" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 80, AlgorithmId = 6, QuestionText = "У яких випадках Priority (Preemptive) може бути менш ефективним?", Options = new List<string> { "Коли процеси мають високі пріоритети", "Коли процеси мають тривалий час виконання", "Коли всі процеси мають однакові пріоритети", "Коли система має обмежені ресурси" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 81, AlgorithmId = 6, QuestionText = "Яка стратегія управління може допомогти зменшити кількість переривань у Priority (Preemptive)?", Options = new List<string> { "Використання часових слів", "Скасування процесів", "Збільшення пріоритету низькоприорітетних процесів", "Зменшення часу виконання" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 82, AlgorithmId = 6, QuestionText = "У Priority (Preemptive) основна мета полягає в:", Options = new List<string> { "Забезпеченні швидкого виконання високоприоритетних процесів", "Оптимізації ресурсо-витрат", "Забезпеченні справедливості", "Зменшенні часу очікування" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 83, AlgorithmId = 6, QuestionText = "Які фактори впливають на виконання процесів у Priority (Preemptive)?", Options = new List<string> { "Пріоритет, час виконання, ресурси", "Тривалість, час надходження", "Кількість процесів", "Об'єм пам'яті" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 84, AlgorithmId = 6, QuestionText = "Чи може алгоритм Priority (Preemptive) викликати проблеми з голодуванням?", Options = new List<string> { "Так, через часті переривання", "Ні, оскільки всі процеси виконуються", "Ні, всі пріоритети однакові", "Так, через нерівномірний розподіл" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 85, AlgorithmId = 6, QuestionText = "Яка мета використання пріоритетів у алгоритмі Priority (Preemptive)?", Options = new List<string> { "Оптимізація ресурсо-витрат", "Зменшення часу очікування", "Забезпечення справедливості", "Підвищення продуктивності" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 86, AlgorithmId = 6, QuestionText = "Які переваги має алгоритм Priority (Preemptive) в порівнянні з Non-preemptive?", Options = new List<string> { "Більш ефективне використання процесорного часу", "Простота реалізації", "Менше споживання пам'яті", "Менше часу на обробку процесів" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 87, AlgorithmId = 6, QuestionText = "Що відбувається з низькоприорітетним процесом у системі з високими пріоритетами?", Options = new List<string> { "Може стати голодним", "Завжди виконується першим", "Переривається", "Отримує додаткові ресурси" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 88, AlgorithmId = 6, QuestionText = "У яких ситуаціях алгоритм Priority (Preemptive) може бути найбільш ефективним?", Options = new List<string> { "Коли потрібно швидко реагувати на важливі запити", "Коли всі процеси мають однаковий час виконання", "Коли системі потрібно швидко обробити всі процеси", "Коли процеси виконуються в циклі" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 89, AlgorithmId = 6, QuestionText = "Що може викликати проблеми з продуктивністю в алгоритмі Priority (Preemptive)?", Options = new List<string> { "Часті переривання і зміни контексту", "Довгі процеси", "Великі обсяги пам'яті", "Малий обсяг даних" }, CorrectOptionIndex = 0 },
                new TestQuestion { Id = 90, AlgorithmId = 6, QuestionText = "Чи впливають часові слоти на виконання процесів у Priority (Preemptive)?", Options = new List<string> { "Так, вони визначають частоту переривань", "Ні, це не має значення", "Ні, час виконання процесів завжди фіксований", "Так, вони визначають порядок виконання" }, CorrectOptionIndex = 0 }
            };
        }
    }
}
